#ifndef TILEBASE_H
#define TILEBASE_H

#include <memory>
#include <vector>

#include "core/gameobject.h"
#include "core/basicresources.h"
#include "core/resourcemaps.h"
#include "buildings/buildingbase.h"
#include "interfaces/igameeventhandler.h"
#include "interfaces/iobjectmanager.h"
#include "workers/workerbase.h"


namespace Course {

/**
 * @brief The TileBase class is a base-class for different Tile-objects
 * in the game. \n
 *
 * Tile is responsible for:
 * * Generating resources.
 * * Checking Tile-specific object placement rules.
 * \n
 *
 * Each Tile has some Base-production which is multiplied by worker's
 * efficiency, when generating resources. Resource generation can also
 * gain flat bonuses from buildings.
 * Tiles also know how many Buildings or Workers can be placed on them.
 */
class TileBase : public GameObject
{
public:
    const unsigned int MAX_BUILDINGS;
    const unsigned int MAX_WORKERS;
    const ResourceMap BASE_PRODUCTION;

    /**
     * @brief Disabled parameterless constructor.
     */
    TileBase() = delete;

    /**
     * @brief Constructor for the class.
     *
     */
    TileBase(const Coordinate& location,
             const std::shared_ptr<iGameEventHandler>& eventhandler,
             const std::shared_ptr<iObjectManager>& objectmanager,
             const unsigned int& max_build = 2,
             const unsigned int& max_work = 3,
             const ResourceMap& production = {}
             );

    /**
     * @brief Default destructor.
     */
    virtual ~TileBase() = default;

    /**
     * @copydoc GameObject::getType()
     */
    virtual std::string getType() const override;

    /**
     * @brief Adds a new Building-object to the tile.
     *
     * Phases: \n
     * 1. Tile checks if it has space for the building. \n
     * 2. Building checks whether it can be placed on this tile. \n
     * 3. Building is added to this Tile. \n
     * 4. Tile update's Building's location. \n
     *
     * @param building A pointer to the Building that is being added.
     * @post Exception guarantee: Basic
     * @exception InvalidPointer - If the building's pointer doesn't
     * point to anything or ObjectManager doesn't return valid shared_ptr to
     * this tile.
     * @exception IllegalMove - Any IllegalException can be thrown by a Tile
     * or Building if it breaks a placement rule.
     * @exception NotEnoughSpace (IllegalMove) - If the tile doesn't have enough
     * space for the Building.
     */
    virtual void addBuilding(const std::shared_ptr<BuildingBase>& building);

    /**
     * @brief Removes a Building-object from this Tile.
     *
     * Phases: \n
     * 1. Reset the Building's location to nothing. \n
     * 2. Remove the Building from m_buildings.
     *
     * @param building A pointer to the Building-object being removed.
     * @post Exception guarantee: Basic
     * @exception InvalidPointer - If the Building's pointer doesn't
     * point to anything.
     */
    virtual void removeBuilding(const std::shared_ptr<BuildingBase>& building);

    /**
     * @brief Adds a new Worker-object to this Tile.
     *
     * Phases: \n
     * 1. Tile checks if it has space for the Worker. \n
     * 2. Worker checks whether it can be placed on this Tile. \n
     * 3. Worker is added to this Tile. \n
     * 4. Tile updates Worker's location. \n
     *
     * @param worker A pointer to the Worker-object that is being added.
     * @post Exception guarantee: Basic
     * @exception InvalidPointer - If the Worker's pointer doesn't
     * point to anything or ObjectManager doesn't return valid shared_ptr to
     * this tile.
     * @exception IllegalMove - Any IllegalException can be thrown by a Tile
     * or Worker if it breaks a placement rule.
     * @exception NotEnoughSpace (IllegalMove) - If the tile doesn't have enough
     * space for the Worker.
     */
    virtual void addWorker(const std::shared_ptr<WorkerBase>& worker);

    /**
     * @brief Removes a Worker-object from this Tile.
     *
     * Phases: \n
     * 1. Reset the Worker's location to nothing. \n
     * 2. Remove the Worker from this Tile. \n
     *
     * @param worker A pointer to the Worker-object being removed.
     * @exception InvalidPointer - If the Worker's pointer doesn't
     * point to anything.
     * @post Exception guarantee: Basic
     * @exceptions See std::vector::erase
     */
    virtual void removeWorker(const std::shared_ptr<WorkerBase>& worker);

    /**
     * @brief Sends information to the EventHandler on
     * what resources were generated by this Tile. \n
     * 1. Call tileWorkAction for each Worker. \n
     * 2. Calculate Tile's production based on Base-production multiplied
     * by Workers' efficiency. \n
     * 3. Calls buildings' getProduction() and adds the flat bonus. \n
     * 4. Sends information to GameEventHandler. \n
     * 5. Returns GameEventHandler's response. \n
     *
     * @post Exception guarantee: Basic
     */
    virtual bool generateResources();

    /**
     * @brief Returns the amount of spaces that are being taken from the
     * building-capacity.
     * @return The amount of space taken.
     * @post Exception guarantee: No-throw
     */
    virtual unsigned int getBuildingCount() const final;

    /**
     * @brief Returns the amount of spaces that are being taken from the
     * worker-capacity.
     * @return The amount of space taken.
     * @post Exception guarantee: No-throw
     */
    virtual unsigned int getWorkerCount() const final;

    /**
     * @brief Checks if the tile has enough space for workers.
     * @param amount Amount of workerspace wanted.
     * @note Uses getMaxWorkers()
     * @post Exception guarantee: No-throw
     */
    virtual bool hasSpaceForWorkers(int amount) const final;

    /**
     * @brief Checks if the tile has enough space for buildings.
     * @param amount Amount of buildingspace wanted.
     * @note Uses getMaxBuildings()
     * @post Exception guarantee: No-throw
     */
    virtual bool hasSpaceForBuildings(int amount) const final;

    /**
     * @brief Returns a vector of pointers to Workers in the Tile.
     * @post Exception Guarantee: No-throw
     */
    virtual std::vector<std::shared_ptr<WorkerBase>> getWorkers() const final;
    /**
     * @brief Returns a vector of pointer to Buildings in the Tile.
     * @post Exception Guarantee: No-throw
     */
    virtual std::vector<std::shared_ptr<BuildingBase>> getBuildings() const final;

private:
    // Each GameObject-derived class with separate container
    // for easier handling.
    std::vector<std::weak_ptr<WorkerBase>> m_workers;
    std::vector<std::weak_ptr<BuildingBase>> m_buildings;

}; // class TileBase

} // namespace Course


#endif // TILEBASE_H
